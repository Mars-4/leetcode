//45. 跳跃游戏 II
//给你一个非负整数数组 nums ，你最初位于数组的第一个位置。
//
//数组中的每个元素代表你在该位置可以跳跃的最大长度。
//
//你的目标是使用最少的跳跃次数到达数组的最后一个位置。
//
//假设你总是可以到达数组的最后一个位置。
//
//
//
//示例 1:
//
//输入: nums = [2, 3, 1, 1, 4]
//输出 : 2
//解释 : 跳到最后一个位置的最小跳跃数是 2。
//从下标为 0 跳到下标为 1 的位置，跳 1 步，然后跳 3 步到达数组的最后一个位置。
//示例 2 :
//
//	输入 : nums = [2, 3, 0, 1, 4]
//	输出 : 2
//
//
//	提示 :
//
//	1 <= nums.length <= 104
//	0 <= nums[i] <= 1000

#include<iostream>
#include<vector>

using namespace std;

class Solution {
public:
	int jump(vector<int>&nums) {
		int len = nums.size();

		if (len <= 1)
		{
			return 0;
		}

		int canJump = 0;
		int curPos = 0;
		int maxPos = 0;
		int maxCanJump = -1;

		int minJump = 0;

		while (curPos < len)
		{
			if (curPos > maxCanJump)
			{
				++minJump;
				maxCanJump = nums[maxPos] + maxPos;
			}
			if (nums[curPos] + curPos > nums[maxPos] + maxPos)
			{
				maxPos = curPos;
			}
			++curPos;
		}

		return minJump;
	}
};

int main()
{
	vector<int> nums;
	nums.push_back(2); //0	 2 
	nums.push_back(3); //0	 2 
	nums.push_back(1); //0	 2 
	nums.push_back(1); //0	 2 
	nums.push_back(4); //0	 2 

	Solution a;
	cout << a.jump(nums);
	return 0;
}
